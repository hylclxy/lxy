<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
        
    <!-- 加载资源文件  其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载-->
    <context:property-placeholder location="classpath:config/config.properties" />

    <!-- 启用注解 -->
    <context:annotation-config />
<!--     <mvc:annotation-driven>   -->
<!--         <mvc:message-converters register-defaults="true">   -->
<!--             <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">   -->
<!--                 <property name="supportedMediaTypes" value="text/html;charset=UTF-8"/>   -->
<!--                 <property name="features">   -->
<!--                     <array>   -->
<!--                         <value>WriteMapNullValue</value>   -->
<!--                         <value>WriteNullStringAsEmpty</value>   -->
<!--                     </array>   -->
<!--                 </property>   -->
<!--             </bean>   -->
<!--         </mvc:message-converters>   -->
<!--     </mvc:annotation-driven> -->
    
    <!--   
    
    教程里的说明, 可以删除
    
    1)若按照jackson和SpringMVC的整合方式,应按照下面的写法,但测试发现这样会报告"HTTP Status 406"  
      The resource identified by this request is only capable of generating responses  
      with characteristics not acceptable according to the request "accept" headers.  
    2)测试通过的整合方式为上面那样在mvc:annotation-driven里面进行注册  
    3)supportedMediaTypes增加[text/html;charset=UTF-8]值,是为了兼容IE6  
      否则[application/json]值在IE6中会导致弹出对话框询问是否保存文件,而firefox等高级浏览器会正常打印json字符串  
    4)若像下面这样给supportedMediaTypes属性赋两个值[text/html;charset=UTF-8]和[application/json],则[application/json]是无效的  
      因为此时应答给浏览器(或者说请求方)的Content-Type头信息都是[text/html;charset=UTF-8],所以给它一个值就行了  
      如果给supportedMediaTypes的值为[application/json],则应答给浏览器的Content-Type头信息就是[application/json;charset=UTF-8]  
    5)关于features属性,不是serializerFeature,而是features,详见FastJsonHttpMessageConverter.java  
      它是用来控制json序列化输出时的一些额外属性,比如说该字段是否输出、输出时key使用单引号还是双引号、key不使用任何引号等等  
      QuoteFieldNames			输出key时是否使用双引号,默认为true  
      WriteMapNullValue		是否输出值为null的字段,默认为false  
      WriteNullNumberAsZero		数值字段如果为null,输出为0,而非null  
      WriteNullListAsEmpty		List字段如果为null,输出为[],而非null  
      WriteNullStringAsEmpty	字符类型字段如果为null,输出为"",而非null  
      WriteNullBooleanAsFalse	Boolean字段如果为null,输出为false,而非null  
    6)通常在网上搜到的fastjson和springMVC整合的例子中都像下面注释的代码那样给了两个属性WriteMapNullValue和QuoteFieldNames  
      这就表示为json解析器设置QuoteFieldNames和WriteMapNullValue的值为true,即输出时key使用双引号,同时也输出值为null的字段  
    7)输出时某字段为String类型,且值为null,此时若需要其输出,且输出值为空字符串,则需同时赋值WriteMapNullValue和WriteNullStringAsEmpty  
      经测试,若只赋值WriteNullStringAsEmpty,则不会输出该字段..加上WriteMapNullValue属性后,便输出了,且输出值不是null,而是预期的空字符串  
     -->  
    <!--   
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">  
                    <property name="supportedMediaTypes">  
                        <list>  
                            <value>text/html;charset=UTF-8</value>  
                            <value>application/json</value>  
                        </list>  
                    </property>  
                    <property name="serializerFeature">  
                        <array>  
                            <value>QuoteFieldNames</value>  
                            <value>WriteMapNullValue</value>  
                        </array>  
                    </property>  
                </bean>  
            </list>  
        </property>  
    </bean>  
     -->  
    <!--   
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">  
                    <property name="supportedMediaTypes" value="text/html;charset=UTF-8"/>  
                </bean>  
            </list>  
        </property>  
    </bean>  
     -->
     <!-- 教程说明结束 -->
    
    <mvc:default-servlet-handler />
    
    <!-- 设置使用注解的类所在的包 -->
    <context:component-scan base-package="com.lxy"></context:component-scan>
    
    <!-- 完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
    
    <!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/" />
        <property name="suffix" value=".jsp" />
    </bean>
    
    <!-- 配置hibernate -->
    <!-- 数据源-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      <property name="driverClassName" value="${db.className}" />
      <property name="url" value="${db.url}" />
      <property name="username" value="${db.user}" />
      <property name="password" value="${db.pass}" />
   </bean>
   <bean id="sessionFactory" 
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan">
            <list>
                <value>com.lxy.web.entity</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
<!--                 <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> -->
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
            </props>
        </property>
    </bean>
   
    <!-- 配置Hibernate事务管理器 -->
    <bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
      <property name="sessionFactory" ref="sessionFactory" />
   </bean>
   
   <!-- 配置事务异常封装 -->
   <bean id="persistenceExceptionTranslationPostProcessor" 
       class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
    
    <!-- 同时配置xml和注解式事务, xml配置通用的事务, 其余service方法需要使用事务可以单独用注解配置, 两者冲突时会以xml的配置为主 -->
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
   
   	<!--  声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="query*" propagation="REQUIRED" read-only="true" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="test*" propagation="REQUIRED" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>
    
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* *..service..*(..))" />
        <!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>
    
</beans>